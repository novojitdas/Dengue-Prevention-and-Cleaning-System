{"ast":null,"code":"import { createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n  return {\n    instance: new LeafletTooltip(props, context.overlayContainer),\n    context\n  };\n}, function useTooltipLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen\n  } = props;\n  useEffect(function addTooltip() {\n    const container = context.overlayContainer;\n\n    if (container == null) {\n      return;\n    }\n\n    const {\n      instance\n    } = element;\n\n    const onTooltipOpen = event => {\n      if (event.tooltip === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    };\n\n    const onTooltipClose = event => {\n      if (event.tooltip === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    };\n\n    container.on({\n      tooltipopen: onTooltipOpen,\n      tooltipclose: onTooltipClose\n    });\n    container.bindTooltip(instance);\n    return function removeTooltip() {\n      container.off({\n        tooltipopen: onTooltipOpen,\n        tooltipclose: onTooltipClose\n      }); // @ts-ignore protected property\n\n      if (container._map != null) {\n        container.unbindTooltip();\n      }\n    };\n  }, [element, context, setOpen, onClose, onOpen]);\n});","map":{"version":3,"sources":["/media/darklord/Head Quarter/00.PROJECT/dengue-prevention-and-cleaning-system/node_modules/react-leaflet/esm/Tooltip.js"],"names":["createOverlayComponent","Tooltip","LeafletTooltip","useEffect","createTooltip","props","context","instance","overlayContainer","useTooltipLifecycle","element","setOpen","onClose","onOpen","addTooltip","container","onTooltipOpen","event","tooltip","update","onTooltipClose","on","tooltipopen","tooltipclose","bindTooltip","removeTooltip","off","_map","unbindTooltip"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,qBAAvC;AACA,SAASC,OAAO,IAAIC,cAApB,QAA0C,SAA1C;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,MAAMF,OAAO,GAAGD,sBAAsB,CAAC,SAASI,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACnF,SAAO;AACLC,IAAAA,QAAQ,EAAE,IAAIL,cAAJ,CAAmBG,KAAnB,EAA0BC,OAAO,CAACE,gBAAlC,CADL;AAELF,IAAAA;AAFK,GAAP;AAID,CAL4C,EAK1C,SAASG,mBAAT,CAA6BC,OAA7B,EAAsCJ,OAAtC,EAA+CD,KAA/C,EAAsDM,OAAtD,EAA+D;AAChE,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA;AAFI,MAGFR,KAHJ;AAIAF,EAAAA,SAAS,CAAC,SAASW,UAAT,GAAsB;AAC9B,UAAMC,SAAS,GAAGT,OAAO,CAACE,gBAA1B;;AAEA,QAAIO,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACD;;AAED,UAAM;AACJR,MAAAA;AADI,QAEFG,OAFJ;;AAIA,UAAMM,aAAa,GAAGC,KAAK,IAAI;AAC7B,UAAIA,KAAK,CAACC,OAAN,KAAkBX,QAAtB,EAAgC;AAC9BA,QAAAA,QAAQ,CAACY,MAAT;AACAR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,EAAhC;AACD;AACF,KAND;;AAQA,UAAMO,cAAc,GAAGH,KAAK,IAAI;AAC9B,UAAIA,KAAK,CAACC,OAAN,KAAkBX,QAAtB,EAAgC;AAC9BI,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,QAAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,EAAlC;AACD;AACF,KALD;;AAOAG,IAAAA,SAAS,CAACM,EAAV,CAAa;AACXC,MAAAA,WAAW,EAAEN,aADF;AAEXO,MAAAA,YAAY,EAAEH;AAFH,KAAb;AAIAL,IAAAA,SAAS,CAACS,WAAV,CAAsBjB,QAAtB;AACA,WAAO,SAASkB,aAAT,GAAyB;AAC9BV,MAAAA,SAAS,CAACW,GAAV,CAAc;AACZJ,QAAAA,WAAW,EAAEN,aADD;AAEZO,QAAAA,YAAY,EAAEH;AAFF,OAAd,EAD8B,CAI1B;;AAEJ,UAAIL,SAAS,CAACY,IAAV,IAAkB,IAAtB,EAA4B;AAC1BZ,QAAAA,SAAS,CAACa,aAAV;AACD;AACF,KATD;AAUD,GAzCQ,EAyCN,CAAClB,OAAD,EAAUJ,OAAV,EAAmBK,OAAnB,EAA4BC,OAA5B,EAAqCC,MAArC,CAzCM,CAAT;AA0CD,CApD4C,CAAtC","sourcesContent":["import { createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n  return {\n    instance: new LeafletTooltip(props, context.overlayContainer),\n    context\n  };\n}, function useTooltipLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen\n  } = props;\n  useEffect(function addTooltip() {\n    const container = context.overlayContainer;\n\n    if (container == null) {\n      return;\n    }\n\n    const {\n      instance\n    } = element;\n\n    const onTooltipOpen = event => {\n      if (event.tooltip === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    };\n\n    const onTooltipClose = event => {\n      if (event.tooltip === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    };\n\n    container.on({\n      tooltipopen: onTooltipOpen,\n      tooltipclose: onTooltipClose\n    });\n    container.bindTooltip(instance);\n    return function removeTooltip() {\n      container.off({\n        tooltipopen: onTooltipOpen,\n        tooltipclose: onTooltipClose\n      }); // @ts-ignore protected property\n\n      if (container._map != null) {\n        container.unbindTooltip();\n      }\n    };\n  }, [element, context, setOpen, onClose, onOpen]);\n});"]},"metadata":{},"sourceType":"module"}