{"ast":null,"code":"import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","map":{"version":3,"sources":["/media/darklord/Head Quarter/00.PROJECT/dengue-prevention-and-cleaning-system/node_modules/react-leaflet/esm/Popup.js"],"names":["createOverlayComponent","Popup","LeafletPopup","useEffect","createPopup","props","context","instance","overlayContainer","usePopupLifecycle","element","setOpen","onClose","onOpen","position","addPopup","onPopupOpen","event","popup","update","onPopupClose","map","on","popupopen","popupclose","setLatLng","openOn","bindPopup","removePopup","_context$overlayConta","off","unbindPopup","removeLayer"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,qBAAvC;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,SAAtC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,MAAMF,KAAK,GAAGD,sBAAsB,CAAC,SAASI,WAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AAC/E,SAAO;AACLC,IAAAA,QAAQ,EAAE,IAAIL,YAAJ,CAAiBG,KAAjB,EAAwBC,OAAO,CAACE,gBAAhC,CADL;AAELF,IAAAA;AAFK,GAAP;AAID,CAL0C,EAKxC,SAASG,iBAAT,CAA2BC,OAA3B,EAAoCJ,OAApC,EAA6CD,KAA7C,EAAoDM,OAApD,EAA6D;AAC9D,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA;AAHI,MAIFT,KAJJ;AAKAF,EAAAA,SAAS,CAAC,SAASY,QAAT,GAAoB;AAC5B,UAAM;AACJR,MAAAA;AADI,QAEFG,OAFJ;;AAIA,aAASM,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,UAAIA,KAAK,CAACC,KAAN,KAAgBX,QAApB,EAA8B;AAC5BA,QAAAA,QAAQ,CAACY,MAAT;AACAR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,EAAhC;AACD;AACF;;AAED,aAASO,YAAT,CAAsBH,KAAtB,EAA6B;AAC3B,UAAIA,KAAK,CAACC,KAAN,KAAgBX,QAApB,EAA8B;AAC5BI,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,QAAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,EAAlC;AACD;AACF;;AAEDN,IAAAA,OAAO,CAACe,GAAR,CAAYC,EAAZ,CAAe;AACbC,MAAAA,SAAS,EAAEP,WADE;AAEbQ,MAAAA,UAAU,EAAEJ;AAFC,KAAf;;AAKA,QAAId,OAAO,CAACE,gBAAR,IAA4B,IAAhC,EAAsC;AACpC;AACA,UAAIM,QAAQ,IAAI,IAAhB,EAAsB;AACpBP,QAAAA,QAAQ,CAACkB,SAAT,CAAmBX,QAAnB;AACD;;AAEDP,MAAAA,QAAQ,CAACmB,MAAT,CAAgBpB,OAAO,CAACe,GAAxB;AACD,KAPD,MAOO;AACL;AACAf,MAAAA,OAAO,CAACE,gBAAR,CAAyBmB,SAAzB,CAAmCpB,QAAnC;AACD;;AAED,WAAO,SAASqB,WAAT,GAAuB;AAC5B,UAAIC,qBAAJ;;AAEAvB,MAAAA,OAAO,CAACe,GAAR,CAAYS,GAAZ,CAAgB;AACdP,QAAAA,SAAS,EAAEP,WADG;AAEdQ,QAAAA,UAAU,EAAEJ;AAFE,OAAhB;AAIA,OAACS,qBAAqB,GAAGvB,OAAO,CAACE,gBAAjC,KAAsD,IAAtD,GAA6D,KAAK,CAAlE,GAAsEqB,qBAAqB,CAACE,WAAtB,EAAtE;AACAzB,MAAAA,OAAO,CAACe,GAAR,CAAYW,WAAZ,CAAwBzB,QAAxB;AACD,KATD;AAUD,GA/CQ,EA+CN,CAACG,OAAD,EAAUJ,OAAV,EAAmBK,OAAnB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6CC,QAA7C,CA/CM,CAAT;AAgDD,CA3D0C,CAApC","sourcesContent":["import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});"]},"metadata":{},"sourceType":"module"}