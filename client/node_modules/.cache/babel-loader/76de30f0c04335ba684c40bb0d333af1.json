{"ast":null,"code":"import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["/media/darklord/Head Quarter/00.PROJECT/dengue-prevention-and-cleaning-system/node_modules/@react-leaflet/core/esm/div-overlay.js"],"names":["useAttribution","useLeafletContext","useEventHandlers","withPane","createDivOverlayHook","useElement","useLifecycle","useDivOverlay","props","setOpen","context","elementRef","map","attribution","current","eventHandlers"],"mappings":"AAAA,SAASA,cAAT,QAA+B,eAA/B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,YAA1C,EAAwD;AAC7D,SAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AAC5C,UAAMC,OAAO,GAAGT,iBAAiB,EAAjC;AACA,UAAMU,UAAU,GAAGN,UAAU,CAACF,QAAQ,CAACK,KAAD,EAAQE,OAAR,CAAT,EAA2BA,OAA3B,CAA7B;AACAV,IAAAA,cAAc,CAACU,OAAO,CAACE,GAAT,EAAcJ,KAAK,CAACK,WAApB,CAAd;AACAX,IAAAA,gBAAgB,CAACS,UAAU,CAACG,OAAZ,EAAqBN,KAAK,CAACO,aAA3B,CAAhB;AACAT,IAAAA,YAAY,CAACK,UAAU,CAACG,OAAZ,EAAqBJ,OAArB,EAA8BF,KAA9B,EAAqCC,OAArC,CAAZ;AACA,WAAOE,UAAP;AACD,GAPD;AAQD","sourcesContent":["import { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}"]},"metadata":{},"sourceType":"module"}