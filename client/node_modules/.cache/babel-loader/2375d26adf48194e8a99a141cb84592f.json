{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["/media/darklord/Head Quarter/00.PROJECT/dengue-prevention-and-cleaning-system/node_modules/@react-leaflet/core/esm/element.js"],"names":["useEffect","useRef","createElementHook","createElement","updateElement","useImmutableLeafletElement","props","context","useMutableLeafletElement","elementRef","propsRef","instance","current","updateElementProps"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAO,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,aAA1C,EAAyD;AAC9D,MAAIA,aAAa,IAAI,IAArB,EAA2B;AACzB,WAAO,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,OAA3C,EAAoD;AACzD,aAAON,MAAM,CAACE,aAAa,CAACG,KAAD,EAAQC,OAAR,CAAd,CAAb;AACD,KAFD;AAGD;;AAED,SAAO,SAASC,wBAAT,CAAkCF,KAAlC,EAAyCC,OAAzC,EAAkD;AACvD,UAAME,UAAU,GAAGR,MAAM,CAACE,aAAa,CAACG,KAAD,EAAQC,OAAR,CAAd,CAAzB;AACA,UAAMG,QAAQ,GAAGT,MAAM,CAACK,KAAD,CAAvB;AACA,UAAM;AACJK,MAAAA;AADI,QAEFF,UAAU,CAACG,OAFf;AAGAZ,IAAAA,SAAS,CAAC,SAASa,kBAAT,GAA8B;AACtC,UAAIH,QAAQ,CAACE,OAAT,KAAqBN,KAAzB,EAAgC;AAC9BF,QAAAA,aAAa,CAACO,QAAD,EAAWL,KAAX,EAAkBI,QAAQ,CAACE,OAA3B,CAAb;AACAF,QAAAA,QAAQ,CAACE,OAAT,GAAmBN,KAAnB;AACD;AACF,KALQ,EAKN,CAACK,QAAD,EAAWL,KAAX,EAAkBC,OAAlB,CALM,CAAT;AAMA,WAAOE,UAAP;AACD,GAbD;AAcD","sourcesContent":["import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}"]},"metadata":{},"sourceType":"module"}